using JuMP
using Gurobi
using DelimitedFiles

C = 67; # Number of customer
DC = 10; # Number of facilities


f_facility_open = [0, 0, 0, 75000, 56250, 68750, 62500, 37500, 60000, 33750] #fixed cost for opening a plant
f_facility_close = [20000, 32500, 15000, 0, 0, 0, 0, 0, 0, 0]


facility_cap = [480, 288, 270, 240, 300, 260, 200, 140, 160, 140] #capacity for the plants k


distance_customer_facility = [37.93	185.98	7.64	73.44	145.59	179.97	27.42	132.00	14.00	66.99;
31.81	187.30	6.03	71.73	145.95	180.25	35.25	133.41	12.44	68.10;
37.35	177.52	16.50	58.21	134.73	168.72	51.10	124.17	28.49	59.66;
44.91	178.99	40.90	57.28	134.42	167.11	75.37	127.69	48.89	68.15;
69.14	176.46	68.75	60.75	131.22	161.34	103.34	129.18	76.97	79.53;
68.54	186.92	73.87	71.65	141.70	171.41	108.17	140.02	79.91	90.04;
76.26	178.56	77.43	66.00	133.41	162.51	112.02	132.76	85.32	86.08;
74.31	174.01	73.01	60.28	128.81	158.40	107.61	127.59	81.75	80.16;
73.69	164.96	67.13	49.69	119.72	150.06	101.50	117.65	77.74	69.54;
76.90	164.02	70.38	50.27	118.79	148.74	104.72	117.33	81.08	70.86;
91.20	125.47	63.59	3.71	81.32	114.79	89.74	74.10	80.69	24.79;
91.34	125.25	63.62	3.55	81.13	114.62	89.67	73.84	80.74	24.46;
91.28	124.22	61.85	6.55	80.69	114.56	86.40	71.99	79.25	19.16;
99.69	117.46	71.84	4.89	73.07	106.38	97.03	66.78	89.05	26.05;
106.86	109.84	77.99	12.07	65.55	99.03	101.66	59.22	95.39	26.28;
106.60	109.92	77.56	11.92	65.72	99.26	101.07	59.13	94.98	25.55;
120.58	95.79	90.57	26.09	51.56	85.24	112.04	45.77	108.15	33.05;
123.70	92.39	93.30	29.44	48.31	82.14	114.08	42.29	110.91	34.68;
132.57	83.42	101.72	38.42	39.39	73.36	121.41	34.08	119.38	41.72;
144.48	72.81	114.05	49.83	27.91	61.34	133.66	28.29	131.69	53.99;
168.12	49.66	136.98	73.61	4.49	37.84	154.68	22.52	154.66	75.65;
171.32	47.54	140.42	76.68	4.34	34.52	158.34	25.57	158.09	79.22;
174.34	44.36	143.26	79.76	4.05	31.56	160.84	26.16	160.95	81.90;
186.71	29.34	154.37	92.91	15.92	22.93	169.64	29.11	172.05	92.21;
219.74	9.07	187.11	125.90	48.40	20.48	201.05	60.08	204.76	124.81;
224.06	17.48	192.09	129.70	52.13	19.99	207.05	66.01	209.77	129.96;
225.87	17.90	193.81	131.55	53.96	21.98	208.60	67.54	211.50	131.65;
225.96	18.37	193.95	131.61	54.03	21.85	208.82	67.76	211.63	131.80;
226.47	15.10	193.99	132.46	54.86	24.62	208.05	67.06	211.65	131.71;
224.27	12.37	191.64	130.39	52.85	23.70	205.51	64.58	209.30	129.34;
215.11	12.75	183.00	120.88	43.26	13.49	197.92	56.89	200.68	120.84;
167.49	51.64	132.50	79.43	31.30	55.17	143.08	12.39	149.84	70.83;
157.57	78.92	120.44	82.62	62.31	86.56	123.75	40.51	136.61	65.22;
167.54	68.70	130.66	89.03	57.20	78.15	134.89	36.72	147.06	73.61;
179.59	57.69	142.97	98.05	54.33	69.91	147.96	37.09	159.57	84.57;
188.31	73.23	150.89	113.63	75.99	88.95	151.00	58.37	166.54	96.92;
130.10	122.35	92.65	82.22	98.89	127.76	86.48	77.18	106.10	58.11;
127.29	126.53	89.99	82.74	102.46	131.68	82.73	80.87	103.05	58.45;
25.86	199.06	17.60	84.09	158.05	192.39	32.05	145.11	0.13	79.87;
22.60	201.53	19.97	85.79	160.27	194.58	34.87	147.61	3.22	82.32;
0.22	214.96	37.83	94.95	172.02	205.88	57.09	161.57	25.94	96.77;
0.20	214.83	37.55	94.88	171.92	205.80	56.68	161.43	25.56	96.60;
6.97	221.19	44.64	100.76	178.04	211.79	62.63	167.91	32.22	103.27;
9.03	222.92	46.70	102.34	179.69	213.40	64.55	169.70	34.28	105.12;
10.83	222.39	47.90	101.41	178.91	212.49	67.41	169.35	36.56	105.08;
15.94	225.76	52.70	104.45	182.04	215.46	72.48	172.92	41.67	108.97;
20.17	234.98	56.07	115.02	192.12	225.98	67.62	181.51	40.97	116.55;
25.44	222.15	40.84	107.00	181.29	215.63	41.52	168.18	23.15	103.02;
27.23	219.41	38.48	105.07	178.83	213.19	37.69	165.43	20.92	100.38;
5.16	212.25	33.48	93.03	169.68	203.68	51.72	158.68	20.66	93.63;
6.81	214.34	40.51	93.50	170.94	204.57	62.65	161.27	30.88	96.99;
64.13	270.71	89.63	155.41	230.08	264.42	81.89	216.73	71.94	151.71;
64.59	270.70	89.72	155.61	230.16	264.50	81.56	216.72	72.03	151.74;
69.39	276.45	95.36	161.07	235.81	270.15	87.33	222.46	77.67	157.45;
155.02	204.85	128.23	156.93	186.15	213.54	98.30	164.24	130.37	133.60;
136.86	189.53	108.23	135.67	167.98	196.63	80.01	146.32	111.69	112.50;
57.60	193.79	34.89	92.31	157.01	191.07	0.85	140.50	32.80	79.27;
140.95	274.01	134.98	191.63	245.39	277.32	101.46	225.43	125.57	174.31;
123.26	131.22	86.15	82.59	106.18	135.90	77.82	84.78	98.79	58.20;
95.77	256.27	96.09	159.01	222.16	255.75	66.56	204.29	83.68	145.70;
95.21	257.95	96.54	159.89	223.59	257.24	67.56	205.84	83.77	146.90;
95.46	257.44	96.45	159.66	223.17	256.79	67.28	205.37	83.81	146.55;
118.00	275.90	119.44	181.82	243.19	276.43	89.28	224.71	106.97	167.71;
67.42	279.37	97.83	161.60	237.69	271.87	94.75	225.46	80.32	160.16;
35.51	250.36	71.07	130.25	207.44	241.25	79.23	196.89	55.26	131.90;
47.58	261.47	80.60	142.37	219.10	253.12	83.34	207.74	63.70	142.49;
150.05	313.35	155.88	219.40	281.14	314.29	126.92	262.50	142.26	205.68
]


demand = [25,13,3,28,15,22,3,24,23,18,19,19,22,16,20,2,22,18,10,13,19,1,24,23,15,15,47,20,40,9,12,7,3,21,4,16,9,3,22,20,3,7,5,10,16,17,15,9,10,6,14,16,17,2,17,15,8,2,16,19,6,3,11,15,3,4,4]

# Create a model
model = Model(Gurobi.Optimizer)

# Define decision variables
@variable(model, x[1:DC], Bin)  # Binary variable indicating if facility is open
@variable(model, y[1:DC, 1:C] >= 0)  # Number of units transported from facility to customer

# Define objective function
@objective(model, Min,
    sum(f_facility_open[p] * x[p] for p in 1:DC) +  # Fixed cost of opening a facility
    sum(f_facility_close[p] * (1 - x[p]) for p in 1:DC) +  # Fixed cost of closing a facility
    sum(10 * distance_customer_facility[(c-1)*DC + p] * y[p, c] for p in 1:DC, c in 1:C)  # Transportation cost
)

# Define constraints
@constraint(model, [c = 1:C], sum(y[d, c] for d in 1:DC) == demand[c])  # Fulfill demand for each customer
@constraint(model, [p = 1:DC], sum(y[p, c] for c in 1:C) <= facility_cap[p] * x[p])  # Facility capacity

# Optimize the model
optimize!(model)

# Print the optimal objective value
println("Optimal Objective Value: ", objective_value(model))

# Print which facilities are open
for p = 1:DC
    if value(x[p]) > 0.5
        println("Facility ", p, " is open")
    end
end

# Print capacity usage at facilities
for p = 1:DC
    println("Facility ", p, " usage: ", sum(value(y[p, c]) for c = 1:C), "/", facility_cap[p])
end